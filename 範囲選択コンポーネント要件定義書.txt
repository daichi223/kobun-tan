# 範囲選択コンポーネント要件定義書
# 古典単語学習アプリ「kobun-tan」プロジェクト
# 作成日: 2025-10-04

## 概要
単語範囲選択（開始〜終了）のUIコンポーネント仕様書。
PC・モバイル両対応、直感的操作、誤操作防止を重視。

## 基本仕様

### 1. レイアウト構成
```
開始: ◀ [入力欄] ▶    終了: ◀ [入力欄] ▶    [次へ]
```

### 2. 入力欄仕様（NumericField）
- **input要素**: type="text" （type="number"は禁止）
- **キーボード**: inputMode="numeric" + pattern="[0-9]*"
- **完了ボタン**: enterKeyHint="done" （iOS/Android右下に「完了」表示）
- **文字制限**: maxLength="3" （3桁まで）
- **文字制御**:
  - 半角数字のみ許容
  - 全角数字→半角数字に自動変換
  - 数字以外の文字は自動除去
- **フォーカス動作**: フォーカス時に全選択（requestAnimationFrame使用）
- **確定動作**: Enter/完了ボタン/blur で確定（onCommit発火）
- **自動遷移**: 途中入力（2→20→200）では自動遷移しない

### 3. 矢印ボタン仕様（StepperButton）
- **配置**: ◀[入力欄]▶ の左右配置
- **アイコン**:
  - ◀ : 値を減らす（decrement）
  - ▶ : 値を増やす（increment）
- **基本動作**: タップで±1
- **長押し動作**:
  - 300ms後からリピート開始
  - 初期速度: 150ms間隔
  - 加速: 毎回10ms短縮
  - 最高速度: 50ms間隔（最速）
  - 停止: マウスアップ/タッチエンド/マウスリーブで即停止
- **対応イベント**:
  - PC: onMouseDown/onMouseUp/onMouseLeave
  - モバイル: onTouchStart/onTouchEnd/onTouchCancel
- **無効化**: 範囲外（min/max）では無効化

### 4. 範囲制御仕様
- **数値範囲**: 1〜330
- **整合性**: 開始 ≤ 終了 を常に保証
- **補正ルール**:
  - 開始 > 終了 → 終了 = 開始 に自動補正
  - 終了 < 開始 → 開始 = 終了 に自動補正
- **初期値**: 開始=1, 終了=330（プレースホルダー表示）

### 5. 次へボタン仕様
- **表示条件**: 開始・終了の両方が数値入力済み
- **動作**: onRangeComplete コールバック実行
- **フォーカス遷移**: 次のUI要素（クイズタイプ選択等）にフォーカス

## UI/UX要件

### 6. モバイル対応
- **キーボード**: 数字専用キーパッド表示
- **完了ボタン**: iOS/Androidで右下に「完了」「Done」表示
- **タップ領域**: 最小44px（アクセシビリティ準拠）
- **レスポンシブ**: flex-wrap で画面幅に応じて折り返し
- **誤操作防止**: 自動遷移なし、明示的確定のみ

### 7. PC対応
- **スピンボタン無効化**: Webkitスピンボタン完全除去
- **キーボード操作**: Enter/Tab/矢印キー対応
- **マウス操作**: 長押しリピート、ホイール無効化
- **統一挙動**: モバイルと同一操作感

### 8. スタイリング
- **ラベル**: "開始"/"終了" 横並び表示
- **入力欄**: w-12 h-8 中央揃え、フォーカス時青枠
- **矢印ボタン**: w-6 h-6 丸角、押下時青背景
- **余白**: コンパクト設計（space-x-1, gap-2）

## 技術仕様

### 9. CSS要件
```css
/* スピンボタン完全無効化 */
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}
input[type=text] {
  -moz-appearance: textfield;
}
```

### 10. バリデーション
- **範囲チェック**: 1≤値≤330
- **型チェック**: 数値のみ、空文字は許可
- **エラー表示**: 赤枠 + エラーメッセージ（任意）

### 11. アクセシビリティ
- **ラベル関連付け**: label要素との適切な関連付け
- **キーボード操作**: フル対応
- **タップ領域**: 44px以上
- **コントラスト**: WCAG準拠

## 非機能要件

### 12. パフォーマンス
- **レンダリング**: React.memo使用でre-render最適化
- **メモリ**: useCallback/useMemoで不要な再生成防止
- **応答性**: 長押し中のUI応答性維持

### 13. 互換性
- **ブラウザ**: iOS Safari, Android Chrome, PC Chrome/Firefox/Edge
- **デバイス**: iPhone, Android, PC, タブレット
- **OS**: iOS 14+, Android 8+, Windows 10+, macOS 10.15+

## 受け入れテスト項目

### 14. 基本動作テスト
□ フォーカス時に全選択される
□ 数字キーパッドが表示される（モバイル）
□ 完了ボタンが表示される（モバイル）
□ Enter/完了で確定される
□ 全角数字が半角に変換される
□ 3桁制限が機能する
□ 範囲外入力が弾かれる

### 15. 矢印ボタンテスト
□ ◀ボタンで値が減る
□ ▶ボタンで値が増える
□ 長押しで加速リピートする
□ 範囲外で無効化される
□ リリースで即停止する

### 16. 範囲制御テスト
□ 開始>終了時に自動補正される
□ 終了<開始時に自動補正される
□ 1〜330の範囲が守られる
□ 両方入力済みで次へボタン表示

### 17. クロスプラットフォームテスト
□ PC: スピンボタンが表示されない
□ PC: 長押しリピートが動作する
□ iOS: 数字キーパッド+完了ボタン
□ Android: 数字キーパッド+Doneボタン
□ 全プラットフォームで同一挙動

## 実装上の注意事項

### 18. 禁止事項
- type="number" の使用（iOS で完了ボタンが出ない）
- 3桁入力での自動遷移（iOS Safari で不具合）
- onBlur での自動確定（誤タップ防止）
- setInterval のネストした使用（メモリリーク防止）

### 19. 推奨実装
- useState での値管理
- useCallback での関数メモ化
- requestAnimationFrame での全選択
- setTimeout による長押しリピート制御
- 防御的プログラミング（null/undefined チェック）

## 変更履歴
- 2025-10-04: 初版作成（◀▶ボタンレイアウト確定版）
- 過去変遷: ＋－ボタン → ◀▶ボタンに変更（直感性向上）
- 過去変遷: type="number" → type="text"（モバイル対応）
- 過去変遷: 自動遷移削除（誤操作防止）

## 完了基準
✅ PC/モバイルで統一された直感的操作
✅ フォーカス時全選択による高速編集
✅ 長押し加速による効率的範囲変更
✅ 誤操作防止の安全な確定システム
✅ レスポンシブデザインによる優れたUX